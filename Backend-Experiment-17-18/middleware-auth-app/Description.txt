Description:

In this experiment an Express.js application was developed to demonstrate how middleware
functions can be used to manage request logging and implement secure route protection using 
Bearer token authentication. The project structure was organized into separate folders for 
middleware and routes to ensure code clarity and modularity.

1: Server Setup: A Node.js server was created using the Express framework. The server listens 
on port 5000 and acts as the backend for handling client requests.


2: Middleware Implementation:

(a): Logging Middleware (logger.js):This middleware was applied globally to all routes. 
It captures and displays essential information such as the HTTP request method (GET, POST, etc.),
the request URL, and the exact timestamp of the request. This helps in monitoring the flow of 
requests and debugging the server easily.

(b): Authentication Middleware (auth.js):This middleware validates the Authorization header sent
with each request. It checks whether the header contains a valid Bearer token. If the token matches
the predefined value mysecrettoken, access to the protected route is granted; otherwise,
the request is denied with an appropriate HTTP status and error message.


3: Route Design:

(a): Public Route (/public):Accessible without any authentication. It responds with a simple
JSON message confirming open access.

(b): Protected Route (/protected):Secured using the authentication middleware. It only responds 
when a valid Bearer token is provided in the header. Invalid or missing tokens lead to denial 
access.


4: Testing Using Postman:

The public route was successfully tested using a simple GET request without any token, returning 
a success message.
Without token → returned “Authorization header missing.”
With an invalid token → returned “Invalid or missing token.”
With the correct token (mysecrettoken) → returned “Access granted to the Protected Route! Token is valid.”


5: Observation:

Every request triggered the logging middleware, confirming that it was functioning globally. 
The authentication middleware correctly validated tokens and controlled access to the protected 
route.

Through this implementation, the experiment demonstrated how middleware functions in Express.js
help in structuring backend applications efficiently. Logging middleware aids in request monitoring
while authentication middleware ensures secure access to restricted routes, forming a foundation
for robust and secure web applications.