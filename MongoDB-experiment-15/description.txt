1 : Title: E-commerce Catalog with Nested Document Structure in MongoDB

2 : Objective:
To design and implement a MongoDB data model using nested documents to represent an 
e-commerce catalog, and to practice CRUD operations using Node.js, Express, and Mongoose
in an MVC structure.


3 : Project Description:
This project simulates an e-commerce catalog where each product can have multiple variants
(e.g., different colors and sizes). The project is implemented using Node.js and follows the 
MVC (Model-View-Controller) architecture for clear separation of concerns.


4 : Folder Structure:

MongoDB-experiment-15-ecommerce-catalog/
│
├── models/             → Contains MongoDB schema definitions
│   └── Product.js      → Schema for products and nested variants
│
├── controllers/        → Handles business logic and CRUD operations
│   └── productController.js
│
├── routes/             → API endpoints for interacting with products
│   └── productRoutes.js
│
├── config/             → Database connection configuration
│   └── db.js
│
├── app.js              → Main server file (entry point)
├── package.json        → Node.js project metadata
├── description.txt     → This project description file



5 : Details of Implementation:

Database Connection (config/db.js): Connects to MongoDB using Mongoose.
Model (models/Product.js): Defines Product schema with a nested variants array.
Controller (controllers/productController.js):
addProduct → Adds a new product with variants.
getProducts → Retrieves all products.
getProductsByCategory → Filters products by category.
getVariantDetails → Retrieves only variant details of a product.
Routes (routes/productRoutes.js): Maps API endpoints to controller functions.
Server (app.js): Sets up Express server and middleware, connects to MongoDB, and
initializes routes.


6 : Testing the Project:

Postman is used to test all APIs:

Add Product (POST) → /api/products/add
Get All Products (GET) → /api/products
Get Products by Category (GET) → /api/products/category/:category
Get Variant Details (GET) → /api/products/variants/:id
MongoDB Compass is used to visually verify that the data is correctly stored, 
including the nested variants.

7 : Summary:

Project demonstrates how to design a MongoDB schema with nested documents.
Shows CRUD operations using Node.js and Mongoose.
Follows MVC architecture for structured code.
Includes screenshots from Postman and MongoDB Compass for documentation.
