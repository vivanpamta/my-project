This experiment focuses on containerizing a React application using Docker and implementing a 
multi-stage build process. Docker allows applications and their dependencies to be packaged together
ensuring that they run consistently across different environments. By containerizing a React app the
deployment process becomes easier, faster, and more reliable.

In this experiment, a multi-stage Dockerfile was used to optimize the final image size and improve
performance. The idea behind a multi-stage build is to separate the build phase from the production 
phase. The first stage is responsible for compiling the React code using Node.js, while the second 
stage serves the final static files through an Nginx web server. This method keeps the final image 
lightweight and free from unnecessary build tools.

A folder named CloudDeployment was created to organize the project. Inside it, a React application 
was initialized using the command npx create-react-app my-react-app. After verifying that the React
app worked locally, a .dockerignore file was created to exclude unnecessary files like node_modules 
from the Docker build process.

A Dockerfile was then created containing two distinct stages. In the first stage, the Node.js image
(node:18-alpine) was used to install dependencies and build the React app using npm run build. In 
the second stage, the Nginx image (nginx:stable-alpine) was used to serve the compiled files from the build directory. The command EXPOSE 80 was added to make the application accessible on the local machine.
The Docker image was built using the command docker build -t my-react-app .. Once the image was built successfully, it was run using docker run -p 8080:80 my-react-app. Opening http://localhost:8080 in the browser displayed the React welcome page, confirming that the containerized application was running correctly.
Through this process, an optimized Docker image was created that was significantly smaller than the 
standard Node.js image. The experiment demonstrated the importance of separating build and production stages, resulting in a clean, efficient, and production-ready image. The React app was successfully served using Nginx, proving the effectiveness of Docker in modern web application deployment.
This experiment successfully met its objectives by producing a working Docker container, a minimized 
image size, and a well-structured multi-stage Dockerfile that clearly distinguished between the 
build and production environments. It showcases how containerization simplifies deployment and 
enhances scalability for frontend applications like React.
