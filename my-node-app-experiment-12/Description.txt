Concurrent Ticket Booking System with Seat Locking and Confirmation :

1 Objective :

Learn to manage concurrent requests in Node.js.
Implement a seat locking mechanism to prevent double booking.
Understand in-memory state management and simple concurrency control.


2. Description of the Code : 

Initialize seats:
Each seat has properties: id, status (available, locked, booked), lockedBy (user), lockExpires (timestamp).

Unlock expired seats:
unlockExpiredSeats() runs before every request to release any seat locks that expired (1 minute).

GET /seats:
Returns a list of all available seats after unlocking expired ones.

POST /seats/lock:
Locks a seat for a user for 1 minute.
Returns error if seat is already locked or booked.

POST /seats/confirm:
Confirms the booking for a seat locked by the user.
Returns error if seat is locked by another user or already booked.

Start server:
Server runs on port 3000.



3. Key Concepts Learned :

Handling concurrent requests safely in a Node.js API.
Implementing a seat locking mechanism with expiry.
Using in-memory data structures to manage state.
Returning proper success/error messages for different scenarios.
Practicing RESTful API design with Express.js.



4. Example API Usage : 

a : Check available seats:
GET /seats


b : Lock a seat for Alice:
POST /seats/lock
{ "seatId": 1, "user": "Alice" }


c : Confirm booking for Alice:
POST /seats/confirm
{ "seatId": 1, "user": "Alice" }


d : Attempt to lock already locked seat:
Returns:
{ "message": "Seat 1 is already locked" }
